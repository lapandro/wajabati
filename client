<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8">
  <title>واجهة الزبون - Wajabati</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Inter', sans-serif; /* استخدام خط Inter */
      direction: rtl;
      background-color: #fdf2e9; /* لون خلفية فاتح ودافئ */
      padding: 20px;
      box-sizing: border-box;
      color: #333;
    }
    h2 {
      color: #e67e22; /* لون برتقالي جذاب */
      margin-bottom: 20px;
      font-size: 1.8em;
      font-weight: bold;
      text-align: center;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
      background-color: #ffffff;
      border-radius: 10px;
      overflow: hidden; /* لضمان تطبيق border-radius على الجدول */
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }
    th, td {
      border: 1px solid #eee;
      padding: 12px;
      text-align: center;
      vertical-align: middle;
    }
    th {
      background-color: #f5f5f5;
      color: #e67e22;
      font-weight: bold;
    }
    .qty-control {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
    }
    .qty-control button {
      padding: 6px 12px;
      background-color: #e67e22;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1em;
      transition: background-color 0.3s ease;
    }
    .qty-control button:hover {
      background-color: #d35400;
    }
    .qty-control input {
      width: 60px;
      text-align: center;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 6px;
      font-size: 1em;
    }
    textarea, button, select {
      width: 100%;
      margin-top: 15px;
      padding: 12px;
      box-sizing: border-box;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 1em;
      text-align: right; /* محاذاة النص لليمين */
    }
    button {
      background-color: #27ae60; /* لون أخضر جذاب للإرسال */
      color: white;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
      font-weight: bold;
      letter-spacing: 0.5px;
    }
    button:hover {
      background-color: #229a55;
      transform: translateY(-2px);
    }
    select {
      background-color: #ffffff;
    }
    .order {
      background: #ffffff;
      padding: 15px;
      margin: 15px 0;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      border-right: 5px solid #e67e22; /* شريط جانبي لتمييز الطلبات */
    }
    .order ul {
      list-style-type: none;
      padding: 0;
      margin: 10px 0 0 0;
    }
    .order ul li {
      padding: 5px 0;
      border-bottom: 1px dashed #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .order ul li:last-child {
      border-bottom: none;
    }
    #totalAmount {
      font-weight: bold;
      font-size: 20px;
      margin-top: 20px;
      color: #27ae60;
      text-align: center;
      background-color: #ffffff;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }
    hr {
      border: none;
      border-top: 1px dashed #ccc;
      margin: 30px 0;
    }

    /* Custom Modal Styles */
    .modal {
      display: none; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1000; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 400px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }
    .modal-content button {
      background-color: #e67e22;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
      width: auto; /* Override full width for modal buttons */
    }
    .modal-content button.cancel {
      background-color: #ccc;
      color: #333;
    }
  </style>
</head>
<body>
  <h2>🍽️ اختر مزود الوجبات</h2>
  <select id="vendorSelect"></select>

  <h2>📋 قائمة الوجبات</h2>
  <table>
    <thead>
      <tr>
        <th>اختيار</th>
        <th>الصنف</th>
        <th>الوحدة</th>
        <th>السعر</th>
        <th>الكمية</th>
      </tr>
    </thead>
    <tbody id="menuTable"></tbody>
  </table>

  <div id="totalAmount">💰 الإجمالي الكلي: 0 ريال</div>

  <h2>✍️ أو اكتب طلبك يدويًا</h2>
  <textarea id="customNote" placeholder="مثلاً: شاي حليب بدون سكر"></textarea>
  <button onclick="sendOrder()">📤 إرسال الطلب</button>

  <hr>

  <h2>📦 طلباتك السابقة</h2>
  <div id="orders"></div>

  <div id="customAlertModal" class="modal">
    <div class="modal-content">
      <p id="alertMessage"></p>
      <button onclick="hideCustomAlert()">حسناً</button>
    </div>
  </div>

  <script type="module">
    // استيراد وظائف Firebase الضرورية
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js";
    import { getDatabase, ref, get, push, onChildAdded } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-database.js";

    // إعدادات Firebase لمشروع Wajabati
    const firebaseConfig = {
      apiKey: "AIzaSyAofstVnfa6b04e3rfMLMs9dY63_OzG9QU", // قم بتحديث هذا بمفتاح API الخاص بك
      authDomain: "wajabati.firebaseapp.com",
      databaseURL: "https://wajabati-default-rtdb.firebaseio.com",
      projectId: "wajabati",
      storageBucket: "wajabati.appspot.com",
      messagingSenderId: "953258977497",
      appId: "1:953258977497:web:b6eca5c56850d82c29b6c8"
    };

    // تهيئة Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getDatabase(app);

    let currentUserId = null;
    let selectedVendorId = null;
    const vendorSelect = document.getElementById("vendorSelect");
    const menuTable = document.getElementById("menuTable");
    const ordersDiv = document.getElementById("orders");
    const totalAmount = document.getElementById("totalAmount");

    // وظائف مخصصة للتنبيه بدلاً من alert()
    function showCustomAlert(message) {
      document.getElementById('alertMessage').textContent = message;
      document.getElementById('customAlertModal').style.display = 'flex';
    }

    function hideCustomAlert() {
      document.getElementById('customAlertModal').style.display = 'none';
    }

    // مراقبة حالة المصادقة
    onAuthStateChanged(auth, (user) => {
      if (user) {
        currentUserId = user.uid;
        loadVendors(); // تحميل قائمة مزودي الوجبات
        loadOrders(); // تحميل الطلبات السابقة للمستخدم
      } else {
        showCustomAlert("❌ لم يتم تسجيل الدخول، سيتم توجيهك للصفحة الرئيسية"); // استخدام التنبيه المخصص
        window.location.href = "index.html"; // توجيه المستخدم لصفحة تسجيل الدخول
      }
    });

    // تحميل قائمة مزودي الوجبات (Vendors)
    function loadVendors() {
      get(ref(db, "vendors")).then(snapshot => {
        vendorSelect.innerHTML = '<option disabled selected>اختر مزود وجبات</option>';
        snapshot.forEach(child => {
          const id = child.key;
          const name = child.val().name;
          const option = document.createElement("option");
          option.value = id;
          option.textContent = name;
          vendorSelect.appendChild(option);
        });
      });
    }

    // معالج حدث عند تغيير مزود الوجبات المحدد
    vendorSelect.addEventListener("change", () => {
      selectedVendorId = vendorSelect.value;
      loadMenu(selectedVendorId); // تحميل قائمة الطعام للمزود المختار
    });

    // تحميل قائمة الطعام لمزود وجبات معين
    function loadMenu(vendorId) {
      menuTable.innerHTML = ""; // مسح القائمة الحالية
      get(ref(db, `menus/${vendorId}`)).then(snapshot => {
        if (snapshot.exists()) {
          const items = snapshot.val();
          Object.entries(items).forEach(([key, item]) => {
            const row = document.createElement("tr");
            row.innerHTML = `
              <td><input type="checkbox" data-key="${key}" data-name="${item.name}" data-price="${item.price}" data-unit="${item.unit}" onchange="calculateTotal()" /></td>
              <td>${item.name}</td>
              <td>${item.unit}</td>
              <td>${item.price} ريال</td>
              <td>
                <div class="qty-control">
                  <button onclick="adjustQty('${key}', -1)">-</button>
                  <input type="number" min="1" value="1" data-qty="${key}" oninput="calculateTotal()" />
                  <button onclick="adjustQty('${key}', 1)">+</button>
                </div>
              </td>
            `;
            menuTable.appendChild(row);
          });
          calculateTotal(); // حساب الإجمالي بعد تحميل القائمة
        } else {
          menuTable.innerHTML = '<tr><td colspan="5">🚫 لا توجد قائمة طعام لهذا المزود.</td></tr>';
        }
      });
    }

    // تعديل كمية الصنف
    window.adjustQty = function (key, delta) {
      const input = document.querySelector(`input[data-qty='${key}']`);
      let value = parseInt(input.value);
      value = isNaN(value) ? 1 : value + delta;
      if (value < 1) value = 1; // التأكد من أن الكمية لا تقل عن 1
      input.value = value;
      calculateTotal(); // إعادة حساب الإجمالي
    }

    // حساب الإجمالي الكلي للطلبات المختارة
    window.calculateTotal = function () {
      let total = 0;
      const selectedItems = Array.from(menuTable.querySelectorAll("input[type=checkbox]:checked"));
      selectedItems.forEach(input => {
        const price = parseFloat(input.getAttribute("data-price"));
        const key = input.getAttribute("data-key");
        const qtyInput = document.querySelector(`input[data-qty='${key}']`);
        const quantity = parseInt(qtyInput.value);
        if (!isNaN(price) && !isNaN(quantity)) {
          total += price * quantity;
        }
      });
      totalAmount.textContent = `💰 الإجمالي الكلي: ${total} ريال`;
    }

    // إرسال الطلب إلى قاعدة البيانات
    window.sendOrder = function () {
      const selectedItems = Array.from(menuTable.querySelectorAll("input[type=checkbox]:checked"))
        .map(input => {
          const key = input.getAttribute("data-key");
          const name = input.getAttribute("data-name");
          const price = parseFloat(input.getAttribute("data-price"));
          const unit = input.getAttribute("data-unit");
          const quantityInput = menuTable.querySelector(`input[data-qty='${key}']`);
          const quantity = parseInt(quantityInput.value);
          return { name, price, unit, quantity };
        });

      const customNote = document.getElementById("customNote").value;

      if (!selectedVendorId) {
        showCustomAlert("❗ الرجاء اختيار مزود وجبات أولاً"); // استخدام التنبيه المخصص
        return;
      }

      if (selectedItems.length === 0 && !customNote.trim()) {
        showCustomAlert("❗ الرجاء اختيار صنف أو كتابة ملاحظة الطلب"); // استخدام التنبيه المخصص
        return;
      }

      // دفع الطلب إلى قاعدة البيانات
      push(ref(db, `orders/${currentUserId}`), {
        vendor: selectedVendorId,
        items: selectedItems,
        customNote: customNote,
        time: Date.now()
      }).then(() => {
        showCustomAlert("✅ تم إرسال الطلب بنجاح"); // استخدام التنبيه المخصص
        document.getElementById("customNote").value = ""; // مسح حقل الملاحظات
        menuTable.querySelectorAll("input[type=checkbox]").forEach(cb => cb.checked = false); // إلغاء تحديد جميع الأصناف
        calculateTotal(); // إعادة حساب الإجمالي
      }).catch(err => {
        showCustomAlert("❌ حدث خطأ أثناء إرسال الطلب: " + err.message); // استخدام التنبيه المخصص
      });
    }

    // تحميل الطلبات السابقة للمستخدم
    function loadOrders() {
      const ordersRef = ref(db, `orders/${currentUserId}`);
      // الاستماع إلى إضافة طلبات جديدة
      onChildAdded(ordersRef, (snapshot) => {
        const order = snapshot.val();
        const box = document.createElement("div");
        box.className = "order";

        // جلب اسم مزود الوجبات
        get(ref(db, `vendors/${order.vendor}`)).then(vendorSnap => {
          const vendorName = vendorSnap.exists() ? vendorSnap.val().name : order.vendor;
          const itemLines = (order.items || []).map(item => `
            <li>${item.name} × ${item.quantity} ${item.unit} - ${item.price} ريال</li>
          `).join("");

          box.innerHTML = `
            🏪 <strong>مزود الوجبات:</strong> ${vendorName}<br>
            🍱 <strong>الأصناف:</strong><br>
            <ul>
              ${itemLines}
            </ul>
            📝 <strong>ملاحظات:</strong> ${order.customNote || "-"}<br>
            ⏰ <small>${new Date(order.time).toLocaleString()}</small>
          `;
          ordersDiv.prepend(box); // إضافة الطلب في بداية القائمة
        });
      });
    }
  </script>
</body>
</html>


